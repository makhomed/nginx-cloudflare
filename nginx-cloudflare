#!/usr/bin/python3 -u

""" Set client real ip for nginx behind Cloudflare
"""

__contact__ = 'https://github.com/makhomed/nginx-cloudflare'
__license__ = "GNU Affero General Public License, version 3.0 or later"
__version__ = "2.0.0"


# imports {{{

import ipaddress
import json
import secrets
import sys
from functools import wraps
from pathlib import Path

from invoke import run

from jinja2 import BaseLoader, Environment

import requests

# }}}

def atomic_write_text(content, filename): # {{{
    assert isinstance(content, str)
    assert isinstance(filename, Path)
    tmp_filename = filename.with_name(filename.name + '.tmp.' + secrets.token_hex() + '.tmp')
    tmp_filename.write_text(content)
    tmp_filename.rename(filename)
# }}}

# Cloudflare API {{{

def retry(max_retries=8, min_delay=1, backoff=2, max_delay=128):
    def decorator(func):
        @wraps(func)
        def wrapped_function(*args, **kwargs):
            last_exception = None
            delay = min_delay
            retries = 0
            while retries < max_retries:
                try:
                    return func(*args, **kwargs)
                except Exception as exception:
                    last_exception = exception
                    import traceback
                    traceback.print_exc()
                    print(f'\n{retries+1} function call {func.__name__} failed. Will retry after delay {delay} seconds...\n')
                    import time
                    time.sleep(delay)
                    delay *= backoff
                    if delay > max_delay:
                        delay = max_delay
                    retries += 1
            raise last_exception
        return wrapped_function
    return decorator

@retry()
def api_cloudlare_get_ips():
    requests_connect_timeout = 10
    requests_read_timeout = 10
    url = 'https://api.cloudflare.com/client/v4/ips'
    timeout = (requests_connect_timeout, requests_read_timeout)
    headers = {'Accept': 'application/json'}
    params = {'networks': 'jdcloud'}
    r = requests.get(url, params=params, headers=headers, timeout=timeout)
    assert r.status_code == 200, f'r.status_code == {r.status_code}'
    data = json.loads(r.text)
    success = data['success']
    errors = data['errors']
    messages = data['messages']
    result = data['result']
    assert success is True, f'success is {success}'
    assert isinstance(errors, list) and not errors, f'errors is {errors}'
    assert isinstance(messages, list) and not messages, f'messages is {messages}'
    return result
# }}}

# set_cloudflare_subnets function {{{

cloudflare_ipv4_subnets = None
cloudflare_ipv6_subnets = None
cloudflare_china_ipv4_subnets = None
cloudflare_china_ipv6_subnets = None

def set_cloudflare_subnets():
    global cloudflare_ipv4_subnets
    global cloudflare_ipv6_subnets
    global cloudflare_china_ipv4_subnets
    global cloudflare_china_ipv6_subnets
    cloudflare_ipv4_subnets = list()
    cloudflare_ipv6_subnets = list()
    cloudflare_china_ipv4_subnets = list()
    cloudflare_china_ipv6_subnets = list()
    result = api_cloudlare_get_ips()
    for ipv4_cidr in result['ipv4_cidrs']:
        cloudflare_ipv4_subnets.append(ipaddress.IPv4Network(ipv4_cidr, strict=True))
    for ipv6_cidr in result['ipv6_cidrs']:
        cloudflare_ipv6_subnets.append(ipaddress.IPv6Network(ipv6_cidr, strict=True))
    for jdcloud_cidr in result['jdcloud_cidrs']:
        ip_network = ipaddress.ip_network(jdcloud_cidr, strict=True)
        if isinstance(ip_network, ipaddress.IPv4Network):
            cloudflare_china_ipv4_subnets.append(ip_network)
        elif isinstance(ip_network, ipaddress.IPv6Network):
            cloudflare_china_ipv6_subnets.append(ip_network)
        else:
            raise ValueError(f"unexpected '{ip_network}' instance of class {ip_network.__class__.__name__}")
# }}}

# Jinja2 templates {{{

template_cloudflare_set_realip_from_conf = """\
{% for cloudflare_ipv4_subnet in cloudflare_ipv4_subnets %}
set_real_ip_from {{ cloudflare_ipv4_subnet }};
{% endfor %}
{% for cloudflare_china_ipv4_subnet in cloudflare_china_ipv4_subnets %}
set_real_ip_from {{ cloudflare_china_ipv4_subnet }};
{% endfor %}
{% for cloudflare_ipv6_subnet in cloudflare_ipv6_subnets %}
set_real_ip_from {{ cloudflare_ipv6_subnet }};
{% endfor %}
{% for cloudflare_china_ipv6_subnet in cloudflare_china_ipv6_subnets %}
set_real_ip_from {{ cloudflare_china_ipv6_subnet }};
{% endfor %}
"""

template_cloudflare_not_deny_access_conf = """\
default 1;
{% for cloudflare_ipv4_subnet in cloudflare_ipv4_subnets %}
{{ cloudflare_ipv4_subnet }} 0;
{% endfor %}
{% for cloudflare_china_ipv4_subnet in cloudflare_china_ipv4_subnets %}
{{ cloudflare_china_ipv4_subnet }} 0;
{% endfor %}
{% for cloudflare_ipv6_subnet in cloudflare_ipv6_subnets %}
{{ cloudflare_ipv6_subnet }} 0;
{% endfor %}
{% for cloudflare_china_ipv6_subnet in cloudflare_china_ipv6_subnets %}
{{ cloudflare_china_ipv6_subnet }} 0;
{% endfor %}
"""
# }}}

def main(): # {{{

    set_cloudflare_subnets()
    environment = Environment(loader=BaseLoader(), keep_trailing_newline=True, trim_blocks=True, lstrip_blocks=True)

    cloudflare_set_realip_from_conf_template = environment.from_string(template_cloudflare_set_realip_from_conf)
    cloudflare_not_deny_access_conf_template = environment.from_string(template_cloudflare_not_deny_access_conf)

    cloudflare_set_realip_from_conf_filename = Path('/etc/nginx/include/cloudflare_set_realip_from.conf')
    cloudflare_not_deny_access_conf_filename = Path('/etc/nginx/include/cloudflare_not_deny_access.conf')

    old_cloudflare_set_realip_from_conf_content = cloudflare_set_realip_from_conf_filename.read_text() if cloudflare_set_realip_from_conf_filename.is_file() else None
    new_cloudflare_set_realip_from_conf_content = cloudflare_set_realip_from_conf_template.render(
        cloudflare_ipv4_subnets=cloudflare_ipv4_subnets,
        cloudflare_china_ipv4_subnets=cloudflare_china_ipv4_subnets,
        cloudflare_ipv6_subnets=cloudflare_ipv6_subnets,
        cloudflare_china_ipv6_subnets=cloudflare_china_ipv6_subnets,
    )

    old_cloudflare_not_deny_access_conf_content = cloudflare_not_deny_access_conf_filename.read_text() if cloudflare_not_deny_access_conf_filename.is_file() else None
    new_cloudflare_not_deny_access_conf_content = cloudflare_not_deny_access_conf_template.render(
        cloudflare_ipv4_subnets=cloudflare_ipv4_subnets,
        cloudflare_china_ipv4_subnets=cloudflare_china_ipv4_subnets,
        cloudflare_ipv6_subnets=cloudflare_ipv6_subnets,
        cloudflare_china_ipv6_subnets=cloudflare_china_ipv6_subnets,
    )

    if old_cloudflare_set_realip_from_conf_content != new_cloudflare_set_realip_from_conf_content\
    or old_cloudflare_not_deny_access_conf_content != new_cloudflare_not_deny_access_conf_content:
        Path('/etc/nginx/include').mkdir(mode=0o755, parents=True, exist_ok=True)
        atomic_write_text(new_cloudflare_set_realip_from_conf_content, cloudflare_set_realip_from_conf_filename)
        atomic_write_text(new_cloudflare_not_deny_access_conf_content, cloudflare_not_deny_access_conf_filename)
        run('systemctl reload nginx')

if __name__ == '__main__':
    main() # }}}
